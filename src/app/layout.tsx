import type { Metadata } from 'next';
import localFont from 'next/font/local';
import { Inter } from 'next/font/google';
import './globals.css';
import Lenis from '@/components/Lenis';
import { ViewTransitions } from 'next-view-transitions';
// import { routing } from '@/i18n/routing';
// import { notFound } from 'next/navigation';
// import { getMessages, setRequestLocale } from 'next-intl/server';
// import { NextIntlClientProvider } from 'next-intl';
import { ReactNode } from 'react';
import { ThemeProvider } from '@/components/theme-provider';
import Header from '@/components/Header';
import Footer from '@/components/Footer';

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
  weight: ['400', '500', '600', '700'],
  style: ['normal', 'italic'],
});

// const pphatton = localFont({
//   src: [
//     {
//       path: '../fonts/pphatton-medium.woff2',
//       weight: '500',
//     },
//   ],
//   variable: '--font-pphatton',
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// type Params = Promise<{ params: { locale: string } }>;

// export function generateStaticParams() {
//   return routing.locales.map((locale) => ({ locale }));
// }

export default function RootLayout({
  children,
}: // params,
{
  children: ReactNode;
  // params: Params;
}) {
  // const {
  //   params: { locale },
  // } = await params;

  // // Ensure that the incoming `locale` is valid
  // if (!routing.locales.includes(locale as any)) {
  //   notFound();
  // }

  // setRequestLocale(locale);

  // // Providing all messages to the client
  // // side is the easiest way to get started
  // const messages = await getMessages();

  return (
    <ViewTransitions>
      <html lang='en' suppressHydrationWarning>
        <body className={`${inter.variable} antialiased`}>
          <ThemeProvider
            defaultTheme='light'
            attribute='data-theme'
            disableTransitionOnChange
          >
            {/* <NextIntlClientProvider messages={messages}> */}
            <Lenis>
              <Header />
              {children}
              {/* <Footer /> */}
            </Lenis>
            {/* </NextIntlClientProvider> */}
          </ThemeProvider>
        </body>
      </html>
    </ViewTransitions>
  );
}
